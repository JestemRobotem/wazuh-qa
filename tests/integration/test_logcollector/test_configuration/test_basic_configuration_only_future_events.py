'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector detects invalid values for
       the 'only-future-events' and 'max-size' tags.
       Log data collection is the real-time process of making sense out of the records generated by
       servers or devices. This component can receive logs through text files or Windows event logs.
       It can also directly receive logs via remote syslog which is useful for firewalls and
       other such devices.

components:
    - logcollector

suite: configuration

targets:
    - agent
    - manager

daemons:
    - wazuh-logcollector

os_platform:
    - linux
    - macos
    - windows

os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - Debian Buster
    - Red Hat 8
    - macOS Catalina
    - macOS Server
    - Ubuntu Focal
    - Ubuntu Bionic
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html#only-future-events

tags:
    - logcollector_configuration
'''
import os
import sys
import time
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from tempfile import gettempdir
from wazuh_testing.tools.services import control_service
from wazuh_testing.modules.logcollector import LOG_COLLECTOR_PREFIX, WINDOWS_AGENT_PREFIX, \
                                               GENERIC_CALLBACK_ERROR_ANALYZING_FILE, \
                                               GENERIC_CALLBACK_ERROR_ANALYZING_EVENTCHANNEL, \
                                               GENERIC_CALLBACK_ERROR_ANALYZING_MACOS
from wazuh_testing.modules.logcollector import event_monitor as evm
from wazuh_testing.processes import check_if_daemons_are_running


# Marks
pytestmark = pytest.mark.tier(level=0)

prefix = LOG_COLLECTOR_PREFIX
macos_process_timeout_init = 10
daemon = 'wazuh-logcollector'

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

# ------------------------------------------------ TEST_ACCEPTED_VALUES ------------------------------------------------
# Configuration and cases data
t1_configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_only_future_events.yaml')
t1_cases_path = os.path.join(TEST_CASES_PATH, 'cases_only_future_events.yaml')
temp_file_path = os.path.join(gettempdir(), 'testing.log')

# Accepted values test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)

if sys.platform == 'win32':
    prefix = WINDOWS_AGENT_PREFIX
    daemon = 'wazuh-agent.exe'


def remove_item_from_list(item):
    """Remove item from configuration, metadata and case_ids list.

    Returns:
        Index of the next element to be checked.
    """
    del t1_configuration_metadata[item]
    del t1_configuration_parameters[item]
    del t1_case_ids[item]
    return item - 1


index = 0
for _ in range(len(t1_configuration_metadata)):
    if t1_configuration_metadata[index]['log_format'] == 'djb-multilog':
        location = '/var/log/testing/current'
    elif t1_configuration_metadata[index]['log_format'] == 'eventchannel':
        location = 'Security'
    elif t1_configuration_metadata[index]['log_format'] == 'macos':
        location = t1_configuration_metadata[index]['log_format']
    else:
        location = temp_file_path

    t1_configuration_metadata[index]['location'] = location
    t1_configuration_parameters[index]['LOCATION'] = location

    if sys.platform == 'win32':
        if t1_configuration_metadata[index]['log_format'] == 'macos' and index > 0:
            # remove macos cases
            index = remove_item_from_list(index)
    elif sys.platform == 'darwin' and index > 0:
        if t1_configuration_metadata[index]['log_format'] == 'eventchannel':
            # remove windows cases
            index = remove_item_from_list(index)
    elif (t1_configuration_metadata[index]['log_format'] == 'macos' or \
         t1_configuration_metadata[index]['log_format'] == 'eventchannel')  and index > 0:
            # remove windows and macos cases
            index = remove_item_from_list(index)
    index += 1

t1_configurations = load_configuration_template(t1_configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)


@pytest.fixture(scope="function")
def generate_macos_logs(metadata):
    """Get configurations from the module."""
    if sys.platform == 'darwin' and metadata['log_format'] == 'macos':
        control_service('restart', 'wazuh-logcollector')
        time.sleep(macos_process_timeout_init)


def check_only_future_events_valid(metadata):
    """Check if Wazuh runs correctly with the specified only future events field.

    Ensure logcollector allows the specified future events attribute.

    Args:
        metadata (dict): Dictionary with the localfile configuration.
    """
    error_message = GENERIC_CALLBACK_ERROR_ANALYZING_FILE

    if sys.platform == 'win32' and metadata['log_format'] == 'eventchannel':
        error_message = GENERIC_CALLBACK_ERROR_ANALYZING_EVENTCHANNEL
        evm.check_eventchannel_analyzing(metadata['location'], error_message=error_message, prefix=prefix)

    elif sys.platform == 'darwin' and metadata['log_format'] == 'macos':
        error_message = GENERIC_CALLBACK_ERROR_ANALYZING_MACOS
        if metadata['only-future-events'] == 'no':
            evm.check_monitoring_macos_logs(error_message=error_message, old_logs=True)

        evm.check_monitoring_macos_logs(error_message=error_message)

    else:
        evm.check_analyzing_file(file=metadata['location'], error_message=error_message, prefix=prefix)


def check_only_future_events_invalid(metadata):
    """Check if Wazuh fails due to a invalid only future events configuration value.

    Args:
        metadata (dict): Dictionary with the localfile configuration.
    """

    invalid_value = metadata['invalid_value']

    if invalid_value == 'max-size':
        option_value = metadata['max-size']
        evm.check_invalid_attribute('only-future-events', 'max-size', option_value, prefix, severity="WARNING")
    else:
        option_value = metadata['only-future-events']
        evm.check_invalid_value(invalid_value, option_value, prefix, severity="WARNING")


@pytest.mark.parametrize('configuration, metadata', zip(t1_configurations, t1_configuration_metadata), ids=t1_case_ids)
def test_only_future_events(configuration, metadata, set_wazuh_configuration, generate_macos_logs,
                            restart_wazuh_daemon_function):
    '''
    description: Check if the 'wazuh-logcollector' daemon detects invalid settings for the 'only-future-events',
                 and 'max-size' tags. For this purpose, the test will set a 'localfile' section using both
                 valid and invalid values for those tags. Finally, it will verify that the 'analyzing' or
                 'monitoring' event (depending on the OS) is triggered when using a valid value, or if an
                 error event is generated when using an invalid one.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Get configurations from the module.
        - metadata:
            type: dict
            brief: Get metadata from the module.
        - set_wazuh_configuration:
            type: fixture
            brief: Apply changes to the ossec.conf configuration.
        - generate_macos_logs:
            type: fixture
            brief: Restart wazuh-logcollector and wait for log to be generated.
        - restart_wazuh_daemon_function:
            type: fixture
            brief: Restart the wazuh service.

    assertions:
        - Verify that the logcollector generates error events when using invalid values
          for the 'only-future-events' tag.
        - Verify that the logcollector generates 'analyzing' or 'monitoring' events when using valid values
          for the 'only-future-events' tag.
        - Verify that wazuh-logcollector or wazuh-agent daemon does not crash.

    input_description: A configuration template (test_basic_configuration_only_future_events) is contained in an
                       external YAML file (wazuh_basic_configuration.yaml). That template is combined with
                       different test cases defined in the module. Those include configuration settings
                       for the 'wazuh-logcollector' daemon.

    expected_output:
        - r'Analyzing file.*'
        - r'INFO.* Analyzing event log.*' (on Windows systems)
        - r'Monitoring macOS .* logs' (on macOS systems)
        - r'Invalid value .* for attribute .* in .* option'
        - r'Invalid value for element .*'

    tags:
        - invalid_settings
        - logs
    '''
    if metadata['invalid_value'] == '':
        check_only_future_events_valid(metadata)
    else:
        check_only_future_events_invalid(metadata)

    assert check_if_daemons_are_running([daemon])[0], f"{daemon} is not running. Maybe it has crashed"
