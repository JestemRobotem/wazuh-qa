'''
copyright: Copyright (C) 2015-2022, Wazuh Inc.

           Created by Wazuh, Inc. <info@wazuh.com>.

           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

type: integration

brief: The 'wazuh-logcollector' daemon monitors configured files and commands for new log messages.
       Specifically, these tests will check if the logcollector starts to monitor log files when
       the 'query' tag is set in the configuration.
       Log data collection is the real-time process of making sense out of the records generated by
       servers or devices. This component can receive logs through text files or Windows event logs.
       It can also directly receive logs via remote syslog which is useful for firewalls and
       other such devices.

components:
    - logcollector

suite: configuration

targets:
    - agent

daemons:
    - wazuh-logcollector

os_platform:
    - macos
    - windows

os_version:
    - macOS Catalina
    - macOS Server
    - Windows 10
    - Windows Server 2019
    - Windows Server 2016

references:
    - https://documentation.wazuh.com/current/user-manual/capabilities/log-data-collection/index.html
    - https://documentation.wazuh.com/current/user-manual/reference/ossec-conf/localfile.html#query

tags:
    - logcollector_configuration
'''
import os
import sys
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.modules.logcollector import WINDOWS_AGENT_PREFIX, \
                                               GENERIC_CALLBACK_ERROR_ANALYZING_MACOS, \
                                               GENERIC_CALLBACK_ERROR_ANALYZING_EVENTCHANNEL
from wazuh_testing.modules.logcollector import event_monitor as evm


# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')

configurations_file = 'configuration_query_windows.yaml'
cases_file = 'cases_query_windows.yaml'

if sys.platform != 'win32' and sys.platform != 'darwin':
    pytestmark = [pytest.mark.skip, pytest.mark.tier(level=0)]
else:
    pytestmark = [pytest.mark.tier(level=0)]
    if sys.platform == 'darwin':
        configurations_file = 'configuration_query_macos.yaml'
        cases_file = 'cases_query_macos.yaml'

    else:
        configurations_file = 'configuration_query_windows.yaml'
        cases_file = 'cases_query_windows.yaml'

# ------------------------------------------------ TEST_ACCEPTED_VALUES ------------------------------------------------
# Configuration and cases data
t1_configurations_path = os.path.join(CONFIGURATIONS_PATH, configurations_file)
t1_cases_path = os.path.join(TEST_CASES_PATH, cases_file)

# Accepted values test configurations (t1)
t1_configuration_parameters, t1_configuration_metadata, t1_case_ids = get_test_cases_data(t1_cases_path)
t1_configurations = load_configuration_template(t1_configurations_path, t1_configuration_parameters,
                                                t1_configuration_metadata)


@pytest.mark.parametrize('configuration, metadata', zip(t1_configurations, t1_configuration_metadata), ids=t1_case_ids)
def test_configuration_query_valid(configuration, metadata, set_wazuh_configuration, restart_wazuh_daemon_function):
    '''
    description: Check if the 'wazuh-logcollector' daemon starts properly when the 'query' tag is used.
                 For this purpose, the test will configure the logcollector to monitor a testing log using
                 the query tag. That query will be different depending on the system OS. Finally, the test
                 will verify that the logcollector is started by verifying that the 'monitoring' or 'analyzing'
                 events are generated.

    wazuh_min_version: 4.2.0

    tier: 0

    parameters:
        - configuration:
            type: dict
            brief: Get configurations from the module.
        - metadata:
            type: dict
            brief: Get metadata from the module.
        - set_wazuh_configuration:
            type: fixture
            brief: Apply changes to the ossec.conf configuration.
        - restart_wazuh_daemon_function:
            type: fixture
            brief: Restart the wazuh service.

    assertions:
        - Verify that the logcollector can start to monitor log files when the 'query' tag is used.

    input_description: A configuration template are contained in external YAML files
                       (configuration_query_macos.yaml and configuration_query_windows.yaml).
                       Those templates are combined with different test cases defined in the cases_query_macos.yaml and
                       cases_query_windows.yaml files.

    expected_output:
        - r'Monitoring macOS logs with'
        - r'Analyzing event log.*'

    tags:
        - invalid_settings
        - logs
    '''
    if metadata['log_format'] == 'macos':
        error_message = GENERIC_CALLBACK_ERROR_ANALYZING_MACOS
        evm.check_monitoring_macos_logs(error_message=error_message)
    else:
        prefix = WINDOWS_AGENT_PREFIX
        error_message = GENERIC_CALLBACK_ERROR_ANALYZING_EVENTCHANNEL
        evm.check_eventchannel_analyzing(metadata['location'], error_message=error_message, prefix=prefix)
