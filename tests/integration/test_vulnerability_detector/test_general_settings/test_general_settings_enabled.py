'''
brief: The tests will modify the value of `enabled` tag in `ossec.conf` and check the result in `ossec.log`.
copyright:
    Copyright (C) 2015-2021, Wazuh Inc.
    Created by Wazuh, Inc. <info@wazuh.com>.
    This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
modules:
    - vulnerability_detector
daemons:
    - wazuh-modulesd
category:
    integration
os_platform:
    - linux
os_vendor:
    - redhat
    - debian
    - ubuntu
    - alas
    - arch-linux
    - centos
os_version:
    - centos6
    - centos7
    - centos8
    - rhel6
    - rhel7
    - rhel8
    - buster
    - stretch
    - wheezy
    - bionic
    - xenial
    - trusty
    - amazon-linux-1
    - amazon-linux-2
tiers:
    - 0
tags:
    - log_monitor
component:
    - manager
'''
import os

import pytest
from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations, check_apply_test
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.vulnerability_detector import callback_detect_vulnerability_detector_disabled, \
    callback_detect_vulnerability_detector_enabled, \
    VULN_DETECTOR_GLOBAL_TIMEOUT

# Marks
pytestmark = pytest.mark.tier(level=0)

# variables
test_data_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_enabled.yaml')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)

parameters = [{'ENABLED': 'yes', 'TAG': 'enabled'}, {'ENABLED': 'no', 'TAG': 'disabled'}]
metadata = [{'enabled': 'yes'}, {'enabled': 'no'}]

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# fixtures
@pytest.fixture(scope='module', params=configurations)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.mark.parametrize('tags_to_apply, custom_callback, custom_error_message', [
    ({'enabled'}, callback_detect_vulnerability_detector_enabled, 'Vulnerability detector is disabled'),
    ({'disabled'}, callback_detect_vulnerability_detector_disabled, 'Vulnerability detector is enabled')
])
def test_enabled(tags_to_apply, custom_callback, custom_error_message, get_configuration, configure_environment,
                 restart_modulesd):
    """
    description:
        Check if the enabled parameter works as intended.
        Vulnerability detector is activated when enabled is set to 'yes' and does
        not activated when enabled is set to 'no'.
    parameters:
        - configure_environment:
            type: fixture
            brief: Configure a custom environment for testing.
        - get_configuration:
            type: fixture
            brief: Get configurations from the module.
        - restart_modulesd:
            type: callable
            brief: Restart modulesd daemon
        - tags_to_apply:
            type: str
            brief: custom callbacks to apply
        - custom_callback_vulnerability:
            type: str
            brief: custon callback created
    wazuh_min_version:
        3.13
    behaviour:
        - r"If `enabled` is set to `yes` then, the test will check the following pattern in `ossec.log`,"
          r"(.*)wazuh-modulesd.vulnerability-detector(.*)"
        - r"If `enabled` is set to `no` then, the test will check the following pattern in `ossec.log`,"
          "(.*)DEBUG. Module disabled. Exiting...(.*)"
        - r"Vulnerability Detector starts when `enabled` is set to `yes`."
        - r"Vulnerability Detector does not start when `enabled` is set to `no`."
    expected_behaviour:
        - "Vulnerability detector is disabled"
        - "Vulnerability detector is enabled"
    """
    check_apply_test(tags_to_apply, get_configuration['tags'])

    wazuh_log_monitor.start(timeout=VULN_DETECTOR_GLOBAL_TIMEOUT, callback=custom_callback,
                            error_message=custom_error_message)
