import os
import pytest

from wazuh_testing.tools.configuration import load_configuration_template, get_test_cases_data
from wazuh_testing.tools.configuration import update_configuration_template
from wazuh_testing.tools.file import read_json_file, read_yaml
from wazuh_testing.db_interface import agent_db
from wazuh_testing.modules.vulnerability_detector import event_monitor as evm
from wazuh_testing.modules import vulnerability_detector as vd


pytestmark = [pytest.mark.server]

# Reference paths
TEST_DATA_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data')
CONFIGURATIONS_PATH = os.path.join(TEST_DATA_PATH, 'configuration_template')
TEST_CASES_PATH = os.path.join(TEST_DATA_PATH, 'test_cases')
TEST_FEEDS_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'feeds')
TEST_PACKAGES_PATH = os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'data', 'vulnerable_packages')

# Configuration and cases data
configurations_path = os.path.join(CONFIGURATIONS_PATH, 'configuration_scan_providers_and_nvd.yaml')
cases_path = os.path.join(TEST_CASES_PATH, 'cases_scan_provider_and_nvd.yaml')

# Custom paths
custom_vulnerable_packages_path = os.path.join(TEST_PACKAGES_PATH, vd.CUSTOM_VULNERABLE_PACKAGES)

# Test configurations
configurations = read_yaml(configurations_path)
metadata = [item['metadata'] for item in read_yaml(cases_path)]
configuration_parameters, configuration_metadata, case_ids = get_test_cases_data(cases_path)
configurations = vd.update_feed_path_configurations(configurations, metadata, TEST_FEEDS_PATH)
systems = [metadata['system'] for metadata in configuration_metadata]

# Global vars
vulnerable_packages = read_json_file(custom_vulnerable_packages_path)


@pytest.fixture(scope='function')
def prepare_scan(metadata, agent_system, mock_agent_with_custom_system):
    """Prepare the environment to launch the vulnerability scan.

    - Mock an agent with a specified system.
    - Insert mocked vulnerables packages.
    - Update packages sync status.
    - If Windows, then copy the custom CPE helper to the dictionaries folder.
    - Force full scan.

    Args:
        metadata (dict): Test case metadata.
        agent_system (str): System to set to the mocked agent.
        mock_agent_with_custom_system (fixture): Mock an agent with a custom system.
    """
    # Insert vulnerable packages
    package_vendor = 'Red Hat, Inc.' if metadata['provider_name'] == 'redhat' else 'wazuh-mocking'

    for package in vulnerable_packages:
        agent_db.insert_package(name=package['name'], version=package['version'], source=package['name'],
                                agent_id=mock_agent_with_custom_system, vendor=package_vendor)

    # Update sync info for packages
    agent_db.update_sync_info(agent_id=mock_agent_with_custom_system, component="syscollector-packages")

    # Clean vuln_cves data
    agent_db.clean_vulnerabilities_inventory(agent_id=mock_agent_with_custom_system)

    # Forcing a full-scan
    agent_db.update_last_full_scan(1, agent_id=mock_agent_with_custom_system)

    yield mock_agent_with_custom_system


@pytest.mark.skip(reason='Temporarily disabled until refactor in https://github.com/wazuh/wazuh-qa/issues/2453')
@pytest.mark.parametrize('configuration, metadata, agent_system', zip(configurations, configuration_metadata, systems),
                         ids=case_ids)
def test_scan_nvd_vulnerabilities(configuration, metadata, agent_system, set_wazuh_configuration_vdt,
                                  clean_cve_tables_func, prepare_scan, restart_modulesd_function):
    # Check potential vulnerabilities using the OVAL feed
    evm.check_oval_detect_potential_vulnerabilities(vulnerabilities_number=5, agent_id=prepare_scan)

    # Check potential vulnerabilities using the NVD feed
    evm.check_nvd_detect_potential_vulnerabilities(vulnerabilities_number=5, agent_id=prepare_scan)

    # Check reported vulnerabilities in log using the OVAL feed
    evm.check_oval_report_vulnerabilities(vulnerabilities_number=5, agent_id=prepare_scan)

    # Check reported vulnerabilities in log using the NVD feed
    evm.check_nvd_report_vulnerabilities(vulnerabilities_number=5, agent_id=prepare_scan)

    # Check the vulnerabilities alerts
    for package in vulnerable_packages:
        evm.check_vulnerability_affects_alert(agent_id=prepare_scan, package=package['name'], cve=package['cveid'])
