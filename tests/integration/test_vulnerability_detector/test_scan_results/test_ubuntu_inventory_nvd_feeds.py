# Copyright (C) 2015-2020, Wazuh Inc.
# Created by Wazuh, Inc. <info@wazuh.com>.
# This program is free software; you can redistribute it and/or modify it under the terms of GPLv2

import os
import pytest
import json
import time

from wazuh_testing.tools import LOG_FILE_PATH
from wazuh_testing.tools.configuration import load_wazuh_configurations
from wazuh_testing.tools.monitoring import FileMonitor
from wazuh_testing.tools.file import truncate_file
from wazuh_testing.vulnerability_detector import make_vuln_callback, insert_package, clean_table, \
                                                 insert_vulnerability, modify_system, clean_vd_tables
from wazuh_testing.tools.services import control_service

# Marks
pytestmark = pytest.mark.tier(level=1)


# Variables
current_test_path = os.path.dirname(os.path.realpath(__file__))
test_data_path = os.path.join(current_test_path, 'data')
configurations_path = os.path.join(test_data_path, 'wazuh_ubuntu_inventory.yaml')
vulnerabilities_data_path = os.path.join(test_data_path, 'nvd_vulnerabilities.json')

wazuh_log_monitor = FileMonitor(LOG_FILE_PATH)
scan_timeout = 40


# Set configuration
parameters = [{'NVD_JSON_PATH': os.path.join(test_data_path, 'nvd_feed.json')}]
metadata = [{'nvd_json_path': os.path.join(test_data_path, 'nvd_feed.json')}]
ids = ['ubuntu_scan_configuration']


# Read JSON data template
with open(vulnerabilities_data_path, 'r') as f:
    nvd_vulnerabilities = json.loads(f.read())

system_data = [
    { "target": "BIONIC", "os_name": "Ubuntu", "os_major": "18", "os_minor": "04", "name": "Ubuntu-bionic" },
    { "target": "XENIAL", "os_name": "Ubuntu", "os_major": "16", "os_minor": "04", "name": "Ubuntu-xenial" },
    { "target": "TRUSTY", "os_name": "Ubuntu", "os_major": "14", "os_minor": "04", "name": "Ubuntu-trusty" }
]
iteration = 0

# Configuration data
configurations = load_wazuh_configurations(configurations_path, __name__, params=parameters, metadata=metadata)


# Fixtures
@pytest.fixture(scope='module', params=configurations, ids=ids)
def get_configuration(request):
    """Get configurations from the module."""
    return request.param


@pytest.fixture(scope='module', params=nvd_vulnerabilities)
def mock_vulnerability_scan(request):
    """
    It allows to mock the vulnerability scan inserting custom packages, feeds and changing the host system
    """
    control_service('stop', daemon='wazuh-db')

    # Wait until modulesd is restarted to avoid overwriting the system
    time.sleep(5)

    # Clean tables
    clean_vd_tables(agent='000')

    global iteration

    # Mock system
    modify_system(os_name=system_data[iteration]['os_name'], os_major=system_data[iteration]['os_major'],
                    os_minor=system_data[iteration]['os_minor'], name=system_data[iteration]['name'])

    # Add custom vulnerabilities and feeds
    insert_vulnerability()
    for vulnerability in request.param['vulnerabilities']:
        insert_package(**vulnerability['package'], format='deb')

    control_service('start', daemon='wazuh-db')

    # Truncate ossec.log
    truncate_file(LOG_FILE_PATH)

    iteration += 1

    yield request.param

    control_service('stop', daemon='wazuh-db')

    # Clean tables
    clean_vd_tables(agent='000')

    time.sleep(1)

    control_service('start', daemon='wazuh-db')

def check_vulnerability_event(package, cve):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector.

    Parameters
    ----------
    package: str
        Name of custom package to check. Example: 'firefox-0'
    cve : str
        Package CVE. Example: 'CVE-2019-11764'
    """
    wazuh_log_monitor.start(
        timeout=scan_timeout,
        update_position=False,
        callback=make_vuln_callback(f"The '{package}' package .* from agent .* is vulnerable to '{cve}'"),
        error_message=f"Could not find the report which says that the package {package} is vulnerable with {cve}",
    )


def test_ubuntu_vulnerabilities_report(get_configuration, configure_environment, restart_modulesd,
                                       mock_vulnerability_scan):
    """
    Check if inserted vulnerable packages are reported by vulnerability detector
    """
    for item in mock_vulnerability_scan['vulnerabilities']:
        check_vulnerability_event(item['package']['name'], item['cve']['cveid'])



