'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.
           Created by Wazuh, Inc. <info@wazuh.com>.
           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
type: system
brief: With Wazuh it is possible to alert about commands run by user in an agent endpoint. This can be achieved
       creating an auditd rule to monitor the commands run by certain user, and using logcollector to read the
       audit.log file.
tier: 0
modules:
    - logcollector
    - analysisd
components:
    - agent
    - manager
daemons:
    - wazuh-logcollector
    - wazuh-analysisd
os_platform:
    - linux
os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6
references:
    - https://documentation.wazuh.com/current/proof-of-concept-guide/audit-commands-run-by-user.html
tags:
    - auditd
    - analysisd
    - logcollector
'''
import json
import pytest

from wazuh_testing.tools.file import validate_json_file, read_json_file


@pytest.fixture
def get_alerts_log(request):
    """Allow to use the --alerts-file parameter to get the path of the alerts log.
    Args:
        request (fixture): Provide information on the executing test function.
    """
    return request.config.getoption('--alerts-file')


@pytest.fixture
def get_expected_data(request):
    """Allow to use the --expected-data parameter to get the elements that are expected to be in the alert.
    Args:
        request (fixture): Provide information on the executing test function.
    """
    return request.config.getoption('--expected-data')


def validate_and_read_json(file_path):
    """Validate the JSON file passed as argument and return its content.
    Args:
        file_path (str): JSON file path.
    Returns:
        The JSON file content.
    Raises:
        ValueError: If the given file is not valid.
    """
    if validate_json_file(file_path):
        file_data = read_json_file(file_path)
    else:
        raise ValueError(f"The file {file_path} is not a valid JSON.")

    return file_data


def test_commands_run_by_user(get_alerts_log, get_expected_data):
    '''
    description: This test aims to check if a specific alert is triggered when the agent is configured to monitor
                 the commands run by certain user.
    wazuh_min_version: 4.4.0
    parameters:
        - get_alerts_log:
            type: fixture
            brief: Get the path of the alerts log.
        - get_expected_data:
            type: fixture
            brief: Get the elements that are expected to be in the alert.
    assertions:
        - Verify that the expected alert is generated.
    input_description: The test receive the alerts generated by Wazuh for a command run by a certain user in a JSON
                       file, and the data that is expected to be in the alert in a python dictionary.
    expected_output:
        - The value of data -> audit -> KEY was not the expected.\nExpected result: EXPECTED\nActual result: ACTUAL.
        - No alert was generated in the manager.
    tags:
        - auditd
        - analysisd
        - logcollector
    '''
    alerts_data = validate_and_read_json(get_alerts_log)
    expected_alert_data = json.loads(get_expected_data)

    alert_found = False
    for alert in alerts_data:
        if 'audit' in alert['data']:
            alert_found = True
    if not alert_found:
        assert False, "No alert was generated in the manager."
    for key in expected_alert_data['audit']:
        if key in alert['data']['audit']:
            assert alert[key] == expected_alert_data[key], f"The value of data -> audit -> {key} was not the " \
                                                           "expected.\n" \
                                                           f"Expected result: {expected_alert_data[key]}\n" \
                                                           f"Actual result: {alert[key]}"
