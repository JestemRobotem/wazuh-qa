'''
copyright: Copyright (C) 2015-2021, Wazuh Inc.
           Created by Wazuh, Inc. <info@wazuh.com>.
           This program is free software; you can redistribute it and/or modify it under the terms of GPLv2
type: system
brief: With Wazuh it is possible to alert about commands run by user in an agent endpoint. This can be achieved
       creating an auditd rule to monitor the commands run by certain user, and using logcollector to read the
       audit.log file.
tier: 0
modules:
    - logcollector
    - analysisd
components:
    - agent
    - manager
daemons:
    - wazuh-logcollector
    - wazuh-analysisd
os_platform:
    - linux
os_version:
    - Arch Linux
    - Amazon Linux 2
    - Amazon Linux 1
    - CentOS 8
    - CentOS 7
    - CentOS 6
    - Ubuntu Focal
    - Ubuntu Bionic
    - Ubuntu Xenial
    - Ubuntu Trusty
    - Debian Buster
    - Debian Stretch
    - Debian Jessie
    - Debian Wheezy
    - Red Hat 8
    - Red Hat 7
    - Red Hat 6
references:
    - https://documentation.wazuh.com/current/proof-of-concept-guide/audit-commands-run-by-user.html
tags:
    - auditd
    - analysisd
    - logcollector
'''

import json
import pytest
from deepdiff import DeepDiff


@pytest.fixture
def get_alerts_log(request):
    """Allow to use the --alerts-file parameter to get the alerts.json file.
    Args:
        request (fixture): Provide information on the executing test function.
    """
    return request.config.getoption('--alerts-file')


@pytest.fixture
def get_expected_data(request):
    """Allow to use the --expected-data parameter to get the elements that are expected to be in the alert.
    Args:
        request (fixture): Provide information on the executing test function.
    """
    return request.config.getoption('--expected-data')


def test_commands_run_by_user(get_alerts_log, get_expected_data):
    '''
    description: This test aims to check if a specific alert is triggered when the agent is configured to monitor
                 the commands run by certain user.
    wazuh_min_version: 4.4.0
    parameters:
        - get_alerts_log:
            type: fixture
            brief: Get the alerts.json file.
        - get_expected_data:
            type: fixture
            brief: Get the elements that are expected to be in the alert.
    assertions:
        - Verify that the expected alert is generated.
    input_description: The test receive the alerts generated by Wazuh for a command run by a certain user,
                       and the data that is expected to be in the alert.
    expected_output:
        - No alerts were generated.
        - The expected alert was no generated.
        - More than 1 alert was generated. Only 1 alert was expected. Actual result {matching_alerts}
    tags:
        - auditd
        - analysisd
        - logcollector
    '''

    expected_alert_data = json.loads(get_expected_data)

    with open(get_alerts_log) as f:
        alerts_data = f.read().splitlines()

    assert len(alerts_data) != 0, 'No alerts were generated.'
    alerts_data = [json.loads(alert) for alert in alerts_data]

    alerts_found = []
    matching_alerts = []
    expected_keys = ['data', 'audit', 'execve']
    key_count = 0

    for alert in alerts_data:
        for key in expected_keys:
            if key in alert:
                alert = alert[key]
                key_count += 1
        if key_count == len(expected_keys):
            alerts_found.append({'execve': alert})
        key_count = 0

    for alert in alerts_found:
        ddiff = DeepDiff(expected_alert_data['execve'], alert['execve'], ignore_order=True)
        if ddiff == {}:
            matching_alerts.append(alert)
    assert len(matching_alerts) != 0, f"The expected alert was no generated."

    assert len(matching_alerts) == 1, "More than 1 alert was generated.\n" \
                                      "Only 1 alert was expected.\n" \
                                      f"Actual result: {matching_alerts}"
